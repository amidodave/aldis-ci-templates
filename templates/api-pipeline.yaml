Parameters:
  Name:
    Type: String

  GitHubMetadataApiRepo:
    Type: String

  GitHubTemplatesRepo:
    Type: String

  GitHubBranch:
    Type: String

  GitHubTemplatesBranch:
    Type: String

  GitHubToken:
    Type: String

  GitHubUser:
    Type: String

  MetadataApiTargetGroup:
    Type: String

  Cluster:
    Type: String

Resources:

  MetadataApiRepository:
    Type: AWS::ECR::Repository
    DeletionPolicy: Retain

  CloudFormationExecutionRole:
    Type: AWS::IAM::Role
    DeletionPolicy: Retain
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "cloudformation.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - ecs:*
                  - ecr:*
                  - iam:*

  CodeBuildServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codebuild.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource: "*"
                Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - ecr:GetAuthorizationToken
              - Resource: !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:GetObject
                  - s3:PutObject
                  - s3:GetObjectVersion
              - Resource: !Sub arn:aws:ecr:${AWS::Region}:${AWS::AccountId}:repository/${MetadataApiRepository}
                Effect: Allow
                Action:
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                  - ecr:BatchCheckLayerAvailability
                  - ecr:PutImage
                  - ecr:InitiateLayerUpload
                  - ecr:UploadLayerPart
                  - ecr:CompleteLayerUpload

  CodePipelineServiceRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument: |
        {
            "Statement": [{
                "Effect": "Allow",
                "Principal": { "Service": [ "codepipeline.amazonaws.com" ]},
                "Action": [ "sts:AssumeRole" ]
            }]
        }
      Policies:
        - PolicyName: root
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Resource:
                  - !Sub arn:aws:s3:::${ArtifactBucket}/*
                Effect: Allow
                Action:
                  - s3:PutObject
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
              - Resource: "*"
                Effect: Allow
                Action:
                  - codebuild:StartBuild
                  - codebuild:BatchGetBuilds
                  - cloudformation:*
                  - iam:PassRole

  ArtifactBucket:
    Type: AWS::S3::Bucket
    DeletionPolicy: Retain

  CodeBuildProject:
    Type: AWS::CodeBuild::Project
    Properties:
      Artifacts:
        Location: !Ref ArtifactBucket
        Type: "S3"
      Source:
        Location: !Sub ${ArtifactBucket}/aldis-metadata-api-source.zip
        Type: "S3"
        BuildSpec: |
          version: 0.2
          phases:
            install:
              commands:
                - export JAVA_HOME="/usr/lib/jvm/java-8-openjdk-amd64"
                - export JDK_HOME="/usr/lib/jvm/java-8-openjdk-amd64"
                - export JRE_HOME="/usr/lib/jvm/java-8-openjdk-amd64/jre"
                - apt-get update && apt-get install -y software-properties-common && add-apt-repository ppa:openjdk-r/ppa
                - apt-get update && apt-get -y install python-setuptools && apt-get -y install openjdk-8-jdk && apt-get clean
                - update-ca-certificates -f
                - mkdir -p /usr/src/gradle
                - wget "https://services.gradle.org/distributions/gradle-4.1-bin.zip" -O /usr/src/gradle/gradle-4.1-bin.zip
                - unzip /usr/src/gradle/gradle-4.1-bin.zip -d /usr/local
                - ln -s /usr/local/gradle-4.1/bin/gradle /usr/bin/gradle
                - rm -rf /usr/src/gradle /var/lib/apt/lists/* /tmp/* /var/tmp/*/
            pre_build:
              commands:
                - $(aws ecr get-login)
                - TAG="$(echo $CODEBUILD_RESOLVED_SOURCE_VERSION | head -c 8)"
                - echo "${REPOSITORY_URI}:${TAG}"
            build:
              commands:
                - gradle buildDocker
                - docker images
                - docker tag src:0.0.1-SNAPSHOT "${REPOSITORY_URI}:${TAG}" 
            post_build:
              commands:
                - docker push "${REPOSITORY_URI}:${TAG}"
                - printf '{"tag":"%s"}' $TAG > apibuild.json
          artifacts:
            files: apibuild.json
      Environment:
        ComputeType: "BUILD_GENERAL1_LARGE"
        Image: "aws/codebuild/docker:1.12.1"
        Type: "LINUX_CONTAINER"
        EnvironmentVariables:
          - Name: AWS_DEFAULT_REGION
            Value: !Ref AWS::Region
          - Name: REPOSITORY_URI
            Value: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${MetadataApiRepository}
      Name: !Sub ${AWS::StackName}-API
      ServiceRole: !Ref CodeBuildServiceRole

  Pipeline:
    Type: AWS::CodePipeline::Pipeline
    Properties:
      Name: !Sub ${Name}-API-Pipeline
      RoleArn: !GetAtt CodePipelineServiceRole.Arn
      ArtifactStore:
        Type: S3
        Location: !Ref ArtifactBucket
      Stages:
        - Name: Source
          Actions:
            - Name: MetadataApiApp
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: !Ref GitHubUser
                Repo: !Ref GitHubMetadataApiRepo
                Branch: !Ref GitHubBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: MetadataApiApp
              RunOrder: 1
            - Name: Templates
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Version: 1
                Provider: GitHub
              Configuration:
                Owner: amidodave
                Repo: !Ref GitHubTemplatesRepo
                Branch: !Ref GitHubTemplatesBranch
                OAuthToken: !Ref GitHubToken
              OutputArtifacts:
                - Name: Template
              RunOrder: 1
  
        - Name: Build
          Actions:
            - Name: MetadataApiBuild
              ActionTypeId:
                Category: Build
                Owner: AWS
                Version: 1
                Provider: CodeBuild
              Configuration:
                ProjectName: !Ref CodeBuildProject
              InputArtifacts:
                - Name: MetadataApiApp
              OutputArtifacts:
                - Name: MetadataApiBuildOutput
              RunOrder: 1
        - Name: Deploy
          Actions:
            - Name: Deploy
              ActionTypeId:
                Category: Deploy
                Owner: AWS
                Version: 1
                Provider: CloudFormation
              Configuration:
                ChangeSetName: Deploy
                ActionMode: CREATE_UPDATE
                StackName: !Sub "${AWS::StackName}-APIService"
                Capabilities: CAPABILITY_NAMED_IAM
                TemplatePath: https://s3-eu-west-1.amazonaws.com/dh-aldis-ci/ci-templates/api-service.yaml
                RoleArn: !GetAtt CloudFormationExecutionRole.Arn
                ParameterOverrides: !Sub |
                  {
                    "MetadataApiTag" : { "Fn::GetParam" : [ "MetadataApiBuildOutput", "apibuild.json", "tag" ] },
                    "DesiredCount": "1",
                    "Cluster": "${Cluster}",
                    "MetadataApiTargetGroup": "${MetadataApiTargetGroup}",
                    "MetadataApiRepository": "${MetadataApiRepository}"
                  }
              InputArtifacts:
                - Name: Template
                - Name: MetadataApiBuildOutput
              RunOrder: 1



Outputs:

  PipelineUrl:
    Value: !Sub https://console.aws.amazon.com/codepipeline/home?region=${AWS::Region}#/view/${Pipeline}
